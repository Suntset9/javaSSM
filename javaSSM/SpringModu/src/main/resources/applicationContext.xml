<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--
        bean标签：表示配置bean
        id属性：表示给bean起名字
        class属性：表示给bean定义类型
    -->
    <!--
    导入bookdao，使下面可以访问 获得依赖

    bean别名：name="dao"，可定义多个使用 , ; 或空格分隔开
    方式一：使用构造方法实例化bean
    -->
    <bean id="bookDao" name="dao" class="com.song.dao.impl.BookDaoImpl" scope="prototype"/>

<!--
      指定上面的bokdao类，使获得关联相当于new了bookDao对象
      scope="prototype"指定对象为非单例对象，
      scope的取值不仅仅只有singleton（单例，默认）和prototype，还有request、session、application、 websocket ，
      表示创建出的对象放置在web容器(tomcat)对应的位置。比如：request表示保存到request域中。
      :如果我们对象非单例，那么就会使用一个就造一个对象，无穷无尽。
      在我们的实际开发当中，绝大部分的Bean是单例的，也就是说绝大部分Bean不需要配置scope属性。（管理复用的对象）
      适合单例交给容器管理的bean：表现层对象，业务层对象，数据层对象，工具对象
      不适合交给容器管理的bean：封装实体的域对象
-->
    <bean id="bookService" name="service,bookService2" class="com.song.sevice.impl.BookServiceImpl" scope="prototype">
        <!--配置server与dao的关系
        property标签：表示配置当前bean的属性
        name属性：表示配置哪一个具体的属性
        ref属性：表示参照哪一个bean
        前面的name="bookDao"代表private BookDao bookDao;
        后面的ref="bookDao"代表上面的 <bean id="bookDao"
        -->
<!--        <property name="bookService" ref="bookDaoLifecycle"/>-->
        <property name="bookDao" ref="bookDao"/>
    </bean>

<!--    方式二：使用静态工厂实例化bean；factory-method="getorderDao"指定工厂里的方法
        静态工厂可以直接写类名
 -->
    <bean id="orderdao" class="com.song.factory.OrderDaoFatory" factory-method="getorderDao"/>

<!--    方式三：使用实例工厂实例化bea；非静态工厂所以要先先把工厂实例化
        先实例化工厂的bean
        factory-bean="userFactory"指的是实例化工厂bean的id
        factory-method="getUserDao"指向的是工厂里的方法
        缺点：需要配合使用，无实际意义，
        factory-method="getUserDao"方法名不固定每次都需要配置；
-->
    <bean id="userFactory" class="com.song.factory.UserDaoFactory" />
    <bean id="userDao" factory-method="getUserDao" factory-bean="userFactory"/>

<!--
        方式四：改良方式三，使用FactoryBean实例化bean
-->
    <bean id="userDao1" class="com.song.factory.UserDaoFactoryBean"/>

<!--    配置实现BookDaoImplLifecycle生命周期，
        init-method="init" 指定告知spring这是初始化，声明周期开始的方法：设置bean初始化生命周期回调函数,此处填写init方法名
        destroy-method="destory"程序结束，虚拟机关闭前执行的方法，声明周期结束方法：设置bean销毁生命周期回调函数，仅适用于单例对象，此处填写destory方法名

-->
    <bean id="bookDaoLifecycle" class="com.song.dao.impl.BookDaoImplLifecycle" init-method="init" destroy-method="destory">
<!--        <property name="setBookDao" ref="bookService"/>-->
    </bean>
<!--
       上面的是自定义的生命周，依赖于BookDao创建产生，跟下面的有关联
       下面的是由spring提供的生命周期，由spring将这些不同的类和接口连接获取，使得他们有关联，在AppForLifeCycle这个测试类中可以调用到
        通过spring的接口创建
-->
<!--    <bean id="bookServiceImpl" class="com.song.sevice.impl.BookServiceImpl">-->
<!--        <property name="bookDao" ref="bookDao"/>-->
<!--    </bean>-->


    <!--
           ==依赖注入的选择：自己开发的模块推荐使用setter注入，使用别人的模块有啥用啥
            配置setter方式注入：
            简单类型和引用类型
            引用类型注入：引用类型注入调用里面的set方法
    -->
    <!--注入简单类型-->
<!--    <bean id="bookDao01" class="com.song.dao.impl.BookDaoImpl">-->
<!--        &lt;!&ndash;property标签：设置注入属性&ndash;&gt;-->
<!--        &lt;!&ndash;name属性：设置注入的属性名，实际是set方法对应的名称&ndash;&gt;-->
<!--        &lt;!&ndash;value属性：设置注入简单类型数据值&ndash;&gt;-->
<!--        <property name="connectionNum" value="100"/>-->
<!--        <property name="databaseName" value="mysql"/>-->
<!--    </bean>-->

<!--    <bean id="userDao01" class="com.song.dao.impl.UserDaoImpl">-->
<!--        <property name="databasesNam" value="school"/>-->
<!--        <property name="tableName" value="test"/>-->

<!--    </bean>-->
    <!--注入引用类型-->
<!--    <bean id="bookService01" class="com.song.sevice.impl.BookServiceImpl">-->
        <!--property标签：设置注入属性-->
        <!--name属性：设置注入的属性名，实际是set方法对应的名称-->
        <!--ref属性：设置注入引用类型bean的id或name-->
        <!--引用的是上面定义的bean，在里面加入set注入等，通过关联也可以获得属性方法等；= new 类-->
<!--        <property name="bookDao" ref="bookDao01"/>-->
<!--        <property name="userDao" ref="userDao01"/>-->
<!--    </bean>-->


    <!--    构造器注入：耦合度高
    -->
    <!--解决参数类型重复问题，使用位置解决参数匹配-->
    <bean id="bookDao02" class="com.song.dao.impl.BookDaoImpl">
        <!--根据构造方法参数位置注入-->
        <constructor-arg index="0" value="100"/>
        <constructor-arg index="1" value="mysql"/>
    </bean>
<!--    构造函数
        通过构造函数，type直接导入变量的类型指定传入，这种容易分不清哪个传哪个
        还有可以直接传函数名传参name=“userDao” value="class01"
-->
    <bean id="userDao02" class="com.song.dao.impl.UserDaoImpl">
        <constructor-arg type="java.lang.String" value="class01"/>
        <constructor-arg type="java.lang.String" value="student"/>
    </bean>
<!-- 通过构造函数，传入别的标签名，把类型传入
-->
    <bean id="bookService02" class="com.song.sevice.impl.BookServiceImpl">
        <constructor-arg name="userDao" ref="userDao02"/>
        <constructor-arg name="bookDao" ref="bookDao02"/>
    </bean>

<!-- =================================================================================================
   自动装配：
            自动装配方式
                ==按类型（常用）==
                按名称
                按构造方法
                不启用自动装配
                                只适合引用类型注入，不适合简单类型操作
                setBookDaoAutoware使用autowire="byName"导入是需要值得set方法的名字，这样才能获取依赖
                <bean id="bookDaoAutoware" class="com.song.dao.impl.BookDaoImplAutoware"/>：这个类型不能设置两个
-->
    <bean id="bookDaoAutoware" class="com.song.dao.impl.BookDaoImplAutoware"/>
    <!--   配置根据类型自动装配 可以不写bean：id 但是要指定出来，不然不知道 关联的set方法-指的是上面这行
    -->
    <bean id="bookServiceImplAutoware" class="com.song.sevice.impl.BookServiceImplAutoware" autowire="byType"/>
<!--    通过bean名字自动装载类型注入-->
<!--    <bean id="BookServiceAutoware" class="com.song.sevice.impl.BookServiceImplAutoware" autowire="byName"/>-->
<!--##### 依赖自动装配特征
1. 自动装配用于引用类型依赖注入，不能对简单类型进行操作
2. 使用按类型装配时（byType）必须保障容器中相同类型的bean唯一，推荐使用 √ 低耦合
3. 使用按名称装配时（byName）必须保障容器中具有指定名称的bean，因变量名与配置耦合，不推荐使用 × 高耦合
4. 自动装配优先级低于setter注入与构造器注入，同时出现时自动装配配置失效
==========================================================================================================================
-->

<!--    ================================================================================
            集合注入：
                    使用的是set注入：
-->
    <bean id="bookDaogather" class="com.song.dao.impl.BookDaoImpl">
        <!--数组注入-->
        <property name="array">
            <array>
                <value>100</value>
                <value>200</value>
                <value>300</value>
            </array>
        </property>
        <!--list集合注入-->
        <property name="list">
            <list>
                <value>itcast</value>
                <value>itheima</value>
                <value>boxuegu</value>
                <value>chuanzhihui</value>
            </list>
        </property>
        <!--set集合注入-->
        <property name="set">
            <set>
                <value>itcast</value>
                <value>itheima</value>
                <value>boxuegu</value>
                <value>boxuegu</value>
            </set>
        </property>
        <!--map集合注入-->
        <property name="map">
            <map>
                <entry key="country" value="china"/>
                <entry key="province" value="henan"/>
                <entry key="city" value="kaifeng"/>
            </map>
        </property>
        <!--Properties注入-->
        <property name="properties">
            <props>
                <prop key="country">china</prop>
                <prop key="province">henan</prop>
                <prop key="city">kaifeng</prop>
            </props>
        </property>
    </bean>




</beans>